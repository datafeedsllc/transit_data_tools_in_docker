user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {

    proxy_buffering off;
    proxy_cache off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;


    upstream front {
      server datatools-ui:9966;
    }

    upstream back {
      server datatools-server:4000;
    }

    server {
      listen 8080;

      #location /login {
      #  rewrite ^/login$ /home permanent;
      #}

      #location /login {
      #  proxy_pass http://front/home;
      #  proxy_set_header Cache-Control no-cache;
      #}

      #location = /login {
       # return 302 /home;
      #}

     #location = /login {
     #   rewrite ^ /home redirect;
      #}

      #location /login {
      #  proxy_cache_bypass $http_upgrade;
      #  proxy_pass http://front/home;
      #}


      #location = /login {
      #  rewrite ^/login$ /home permanent;
      #  proxy_redirect off;
      #}

    location = /login {
        return 302 /home;
    }

    location /home {
        proxy_pass http://front;

    }



      location /api {
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_set_header Host $http_host;
        #proxy_set_header X-NginX-Proxy true;

        proxy_pass http://back/api;
        #proxy_redirect off;
      }

      location / {
        proxy_pass http://front/;
        proxy_buffering off;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        expires off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
      }

    }
}