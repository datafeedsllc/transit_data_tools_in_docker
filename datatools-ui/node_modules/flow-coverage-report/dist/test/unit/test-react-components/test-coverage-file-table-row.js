'use strict';
'use babel';

/* eslint-disable react/jsx-filename-extension */

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _ava = require('ava');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _common = require('./common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REACT_COMPONENT = _common.BASE_DIR + '/coverage-file-table-row';

(0, _ava.test)('<FlowCoverageFileTableRow />', function (t) {
  var FlowCoverageFileTableRow = require(REACT_COMPONENT);
  var props = {
    /* eslint-disable camelcase */
    filename: 'fake-filename.js',
    covered_count: 1,
    uncovered_count: 2,
    disableLink: false
    /* eslint-enable camelcase */
  };
  var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(FlowCoverageFileTableRow, props));

  var expectedKeys = ['filename', 'percent', 'total', 'covered', 'uncovered'];

  t.is(wrapper.find('tr').length, 1);
  t.is(wrapper.find('td').length, expectedKeys.length);

  var shallowWrapper = (0, _enzyme.shallow)(_react2.default.createElement(FlowCoverageFileTableRow, props));

  var i = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = expectedKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var expectedKey = _step.value;

      t.is(shallowWrapper.find('td').at(i).key(), expectedKey);
      i++;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});

(0, _ava.test)('<FlowCoverageFileTableRow /> with errors', function (t) {
  var FlowCoverageFileTableRow = require(REACT_COMPONENT);
  var baseErrorProps = {
    filename: 'fake-filename.js',
    disableLink: true,
    isError: true,

    /* eslint-disable camelcase */
    covered_count: 0,
    uncovered_count: 0
    /* eslint-enable camelcase */
  };

  var testErrorProp = function testErrorProp(props, expectedErrorRegEx) {
    var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(FlowCoverageFileTableRow, props));

    var expectedKeys = ['filename', 'percent', 'total', 'covered', 'uncovered'];

    t.is(wrapper.find('tr').length, 1);
    t.true(wrapper.find('tr').hasClass('error'), 1);

    t.is(wrapper.find('td').length, expectedKeys.length);

    var i = 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = expectedKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var expectedKey = _step2.value;

        t.is(wrapper.find('td').at(i).key(), expectedKey);
        i++;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var errorIcon = wrapper.find('.attention.icon');
    t.is(errorIcon.length, 1);

    var errorPopup = wrapper.find('.ui.popup');
    t.is(errorPopup.length, 1);

    t.regex(errorPopup.text(), expectedErrorRegEx);
  };

  var flowCoverageErrorProps = (0, _extends3.default)({}, baseErrorProps, {
    flowCoverageError: 'Fake Coverage Error'
  });
  testErrorProp(flowCoverageErrorProps, /Fake Coverage Error/);

  var flowCoverageParsingErrorProps = (0, _extends3.default)({}, baseErrorProps, {
    flowCoverageParsingError: 'Fake Parsing Error'
  });
  testErrorProp(flowCoverageParsingErrorProps, /Fake Parsing Error/);

  var flowCoverageExceptionErrorProps = (0, _extends3.default)({}, baseErrorProps, {
    flowCoverageException: 'Fake Coverage Exception'
  });
  testErrorProp(flowCoverageExceptionErrorProps, /Fake Coverage Exception/);

  var flowCoverageUnrecognizedErrorProps = (0, _extends3.default)({}, baseErrorProps, {
    flowCoverageStderr: 'Fake flow unrecognized error stderr'
  });
  testErrorProp(flowCoverageUnrecognizedErrorProps, /Fake flow unrecognized error stderr/);
});

_ava.test.todo('<FlowCoverageFileTableRow /> with missing props');
//# sourceMappingURL=test-coverage-file-table-row.js.map