'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

var _fixtures = require('./fixtures');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_REPORT_TEXT = '../../lib/report-text';
var NPM_TABLE = 'terminal-table';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('generate Text report', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(t) {
    var print, npmTable, reportText, fakeTable, mockTableFiles, mockTablePreSummary, mockTableSummary, options;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            print = _sinon2.default.stub();
            npmTable = _sinon2.default.stub();


            (0, _mockRequire2.default)(NPM_TABLE, npmTable);

            reportText = _mockRequire2.default.reRequire(LIB_REPORT_TEXT);

            fakeTable = function fakeTable() {
              return {
                push: function push() {},
                attrRange: function attrRange() {}
              };
            };

            mockTableFiles = _sinon2.default.stub(fakeTable());
            mockTablePreSummary = _sinon2.default.stub(fakeTable());
            mockTableSummary = _sinon2.default.stub(fakeTable());


            npmTable.onCall(0).returns(mockTableFiles);
            npmTable.onCall(1).returns(mockTablePreSummary);
            npmTable.onCall(2).returns(mockTableSummary);

            options = {
              projectDir: '/projectDir',
              log: print
            };
            _context.next = 14;
            return reportText.generate(_fixtures.FLOW_COVERAGE_SUMMARY_DATA, options);

          case 14:

            t.is(print.callCount, 3);
            t.is(npmTable.callCount, 3);

            // The files table contains an header and a file for every file in the
            // coverage data.
            t.is(mockTableFiles.push.callCount, 1 + Object.keys(_fixtures.FLOW_COVERAGE_SUMMARY_DATA.files).length);

          case 17:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava.test.todo('generate Text report failures');
//# sourceMappingURL=test-report-text.js.map