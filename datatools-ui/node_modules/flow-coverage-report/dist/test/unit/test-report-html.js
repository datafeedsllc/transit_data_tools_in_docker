'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

var _fixtures = require('./fixtures');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_REPORT_HTML = '../../lib/report-html';
var LIB_PROMISIFIED = '../../lib/promisified';
var LIB_REACT_COMPONENT = '../../lib/components/flow-coverage-html-report';
var NPM_REACT = 'react-dom/server';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('generate HTML report', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(t) {
    var stubReact, fakeReactComponent, mkdirp, readFile, writeFile, reportHTML, options;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            stubReact = _sinon2.default.stub({
              renderToStaticMarkup: function renderToStaticMarkup() {}
            });

            (0, _mockRequire2.default)(NPM_REACT, stubReact);

            fakeReactComponent = function fakeReactComponent() {
              return {};
            };

            (0, _mockRequire2.default)(LIB_REACT_COMPONENT, fakeReactComponent);

            mkdirp = _sinon2.default.stub();
            readFile = _sinon2.default.stub();
            writeFile = _sinon2.default.stub();

            (0, _mockRequire2.default)(LIB_PROMISIFIED, { mkdirp: mkdirp, readFile: readFile, writeFile: writeFile });

            mkdirp.returns(Promise.resolve());
            writeFile.returns(Promise.resolve());
            readFile.returns(Promise.resolve('fake file content'));

            reportHTML = _mockRequire2.default.reRequire(LIB_REPORT_HTML);
            options = {
              projectDir: '/projectDir',
              outputDir: '/projectDir/flow-coverage/'
            };
            _context.next = 15;
            return reportHTML.generate(_fixtures.FLOW_COVERAGE_SUMMARY_DATA, options);

          case 15:

            t.true(true);

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava.test.todo('generate HTML report failures');
//# sourceMappingURL=test-report-html.js.map