{"version":3,"sources":["../../../src/test/unit/test-report-text.js"],"names":["LIB_REPORT_TEXT","NPM_TABLE","afterEach","stopAll","t","print","stub","npmTable","reportText","reRequire","fakeTable","push","attrRange","mockTableFiles","mockTablePreSummary","mockTableSummary","onCall","returns","options","projectDir","log","generate","is","callCount","Object","keys","files","length","todo"],"mappings":";AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AAEA;;AAEA;;;;AAIA,IAAMA,kBAAkB,uBAAxB;AACA,IAAMC,YAAY,gBAAlB;;AAEA,UAAKC,SAAL,CAAe,YAAM;AACnB,wBAAYC,OAAZ;AACD,CAFD;;AAIA,eAAK,sBAAL;AAAA,wEAA6B,iBAAeC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,iBADqB,GACb,gBAAMC,IAAN,EADa;AAErBC,oBAFqB,GAEV,gBAAMD,IAAN,EAFU;;;AAI3B,uCAAYL,SAAZ,EAAuBM,QAAvB;;AAEMC,sBANqB,GAMR,sBAAYC,SAAZ,CAAsBT,eAAtB,CANQ;;AAQrBU,qBARqB,GAQT,SAAZA,SAAY,GAAM;AACtB,qBAAO;AACLC,sBAAM,gBAAM,CAAE,CADT;AAELC,2BAAW,qBAAM,CAAE;AAFd,eAAP;AAID,aAb0B;;AAcrBC,0BAdqB,GAcJ,gBAAMP,IAAN,CAAWI,WAAX,CAdI;AAerBI,+BAfqB,GAeC,gBAAMR,IAAN,CAAWI,WAAX,CAfD;AAgBrBK,4BAhBqB,GAgBF,gBAAMT,IAAN,CAAWI,WAAX,CAhBE;;;AAkB3BH,qBAASS,MAAT,CAAgB,CAAhB,EAAmBC,OAAnB,CAA2BJ,cAA3B;AACAN,qBAASS,MAAT,CAAgB,CAAhB,EAAmBC,OAAnB,CAA2BH,mBAA3B;AACAP,qBAASS,MAAT,CAAgB,CAAhB,EAAmBC,OAAnB,CAA2BF,gBAA3B;;AAEMG,mBAtBqB,GAsBX;AACdC,0BAAY,aADE;AAEdC,mBAAKf;AAFS,aAtBW;AAAA;AAAA,mBA0BrBG,WAAWa,QAAX,uCAAgDH,OAAhD,CA1BqB;;AAAA;;AA4B3Bd,cAAEkB,EAAF,CAAKjB,MAAMkB,SAAX,EAAsB,CAAtB;AACAnB,cAAEkB,EAAF,CAAKf,SAASgB,SAAd,EAAyB,CAAzB;;AAEA;AACA;AACAnB,cAAEkB,EAAF,CACET,eAAeF,IAAf,CAAoBY,SADtB,EAEE,IAAIC,OAAOC,IAAP,CAAY,qCAA2BC,KAAvC,EAA8CC,MAFpD;;AAjC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAuCA,UAAKC,IAAL,CAAU,+BAAV","file":"test-report-text.js","sourcesContent":["'use babel';\n\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nimport {\n  FLOW_COVERAGE_SUMMARY_DATA\n} from './fixtures';\n\nconst LIB_REPORT_TEXT = '../../lib/report-text';\nconst NPM_TABLE = 'terminal-table';\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('generate Text report', async function(t) {\n  const print = sinon.stub();\n  const npmTable = sinon.stub();\n\n  mockRequire(NPM_TABLE, npmTable);\n\n  const reportText = mockRequire.reRequire(LIB_REPORT_TEXT);\n\n  const fakeTable = () => {\n    return {\n      push: () => {},\n      attrRange: () => {}\n    };\n  };\n  const mockTableFiles = sinon.stub(fakeTable());\n  const mockTablePreSummary = sinon.stub(fakeTable());\n  const mockTableSummary = sinon.stub(fakeTable());\n\n  npmTable.onCall(0).returns(mockTableFiles);\n  npmTable.onCall(1).returns(mockTablePreSummary);\n  npmTable.onCall(2).returns(mockTableSummary);\n\n  const options = {\n    projectDir: '/projectDir',\n    log: print\n  };\n  await reportText.generate(FLOW_COVERAGE_SUMMARY_DATA, options);\n\n  t.is(print.callCount, 3);\n  t.is(npmTable.callCount, 3);\n\n  // The files table contains an header and a file for every file in the\n  // coverage data.\n  t.is(\n    mockTableFiles.push.callCount,\n    1 + Object.keys(FLOW_COVERAGE_SUMMARY_DATA.files).length\n  );\n});\n\ntest.todo('generate Text report failures');\n"]}