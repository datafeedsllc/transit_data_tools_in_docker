{"version":3,"sources":["../../../src/test/unit/test-report-html.js"],"names":["LIB_REPORT_HTML","LIB_PROMISIFIED","LIB_REACT_COMPONENT","NPM_REACT","afterEach","stopAll","t","stubReact","stub","renderToStaticMarkup","fakeReactComponent","mkdirp","readFile","writeFile","returns","Promise","resolve","reportHTML","reRequire","options","projectDir","outputDir","generate","true","todo"],"mappings":";AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AAEA;;AAEA;;;;AAIA,IAAMA,kBAAkB,uBAAxB;AACA,IAAMC,kBAAkB,uBAAxB;AACA,IAAMC,sBAAsB,gDAA5B;AACA,IAAMC,YAAY,kBAAlB;;AAEA,UAAKC,SAAL,CAAe,YAAM;AACnB,wBAAYC,OAAZ;AACD,CAFD;;AAIA,eAAK,sBAAL;AAAA,wEAA6B,iBAAeC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,qBADqB,GACT,gBAAMC,IAAN,CAAW;AAC3BC,oCAAsB,gCAAM,CAAE;AADH,aAAX,CADS;;AAI3B,uCAAYN,SAAZ,EAAuBI,SAAvB;;AAEMG,8BANqB,GAMA,SAArBA,kBAAqB,GAAM;AAC/B,qBAAO,EAAP;AACD,aAR0B;;AAS3B,uCAAYR,mBAAZ,EAAiCQ,kBAAjC;;AAEMC,kBAXqB,GAWZ,gBAAMH,IAAN,EAXY;AAYrBI,oBAZqB,GAYV,gBAAMJ,IAAN,EAZU;AAarBK,qBAbqB,GAaT,gBAAML,IAAN,EAbS;;AAc3B,uCAAYP,eAAZ,EAA6B,EAACU,cAAD,EAASC,kBAAT,EAAmBC,oBAAnB,EAA7B;;AAEAF,mBAAOG,OAAP,CAAeC,QAAQC,OAAR,EAAf;AACAH,sBAAUC,OAAV,CAAkBC,QAAQC,OAAR,EAAlB;AACAJ,qBAASE,OAAT,CAAiBC,QAAQC,OAAR,CAAgB,mBAAhB,CAAjB;;AAEMC,sBApBqB,GAoBR,sBAAYC,SAAZ,CAAsBlB,eAAtB,CApBQ;AAsBrBmB,mBAtBqB,GAsBX;AACdC,0BAAY,aADE;AAEdC,yBAAW;AAFG,aAtBW;AAAA;AAAA,mBA0BrBJ,WAAWK,QAAX,uCAAgDH,OAAhD,CA1BqB;;AAAA;;AA4B3Bb,cAAEiB,IAAF,CAAO,IAAP;;AA5B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AA+BA,UAAKC,IAAL,CAAU,+BAAV","file":"test-report-html.js","sourcesContent":["'use babel';\n\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nimport {\n  FLOW_COVERAGE_SUMMARY_DATA\n} from './fixtures';\n\nconst LIB_REPORT_HTML = '../../lib/report-html';\nconst LIB_PROMISIFIED = '../../lib/promisified';\nconst LIB_REACT_COMPONENT = '../../lib/components/flow-coverage-html-report';\nconst NPM_REACT = 'react-dom/server';\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('generate HTML report', async function(t) {\n  const stubReact = sinon.stub({\n    renderToStaticMarkup: () => {}\n  });\n  mockRequire(NPM_REACT, stubReact);\n\n  const fakeReactComponent = () => {\n    return {};\n  };\n  mockRequire(LIB_REACT_COMPONENT, fakeReactComponent);\n\n  const mkdirp = sinon.stub();\n  const readFile = sinon.stub();\n  const writeFile = sinon.stub();\n  mockRequire(LIB_PROMISIFIED, {mkdirp, readFile, writeFile});\n\n  mkdirp.returns(Promise.resolve());\n  writeFile.returns(Promise.resolve());\n  readFile.returns(Promise.resolve('fake file content'));\n\n  const reportHTML = mockRequire.reRequire(LIB_REPORT_HTML);\n\n  const options = {\n    projectDir: '/projectDir',\n    outputDir: '/projectDir/flow-coverage/'\n  };\n  await reportHTML.generate(FLOW_COVERAGE_SUMMARY_DATA, options);\n\n  t.true(true);\n});\n\ntest.todo('generate HTML report failures');\n"]}