{"version":3,"sources":["../../../src/test/unit/test-flow.js"],"names":["LIB_FLOW","LIB_PROMISIFIED","NPM_TEMP","tmpDirPath","tmpFilePath","afterEach","stopAll","t","exec","stub","writeFile","tempPath","path","onFirstCall","returns","Promise","resolve","err","Error","flow","reRequire","is","callCount","throws","checkFlowStatus","true","calledOnce","firstCall","args","deepEqual","cwd","maxBuffer","Infinity","dontReject","fakeJSONStatusReply","passed","flowVersion","errors","onCall","code","stdout","JSON","stringify","onSecondCall","res","notFlowStatusJSON","fakeExecError","message","filename","collectFlowCoverageForFile","collectData","isError","flowCoverageException","expressions","covered_count","uncovered_count","uncovered_locs","expectedParsingError","parse","flowCoverageParsingError","stderr","flowCoverageError","fakeFlowCoverageData","fakeCoverageData","ok","Buffer","timeout","glob","fakeFlowStatus","firstGlobResults","secondGlobResults","allFiles","concat","i","length","start","source","line","column","offset","end","globIncludePatterns","globExcludePatterns","collectFlowCoverage","generatedAt","resFiles","files","flowStatus","concurrentFiles","percent","threshold","filteredFiles","filter","file","sort","Object","keys","getCoveredPercent"],"mappings":"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","file":"test-flow.js","sourcesContent":["'use babel';\n\nimport minimatch from 'minimatch';\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nimport {DEFAULT_FLOW_TIMEOUT} from '../../lib/index';\n\nconst LIB_FLOW = '../../lib/flow';\nconst LIB_PROMISIFIED = '../../lib/promisified';\nconst NPM_TEMP = 'temp';\n\nconst tmpDirPath = '/tmp/fake-tmp-path';\nconst tmpFilePath = `${tmpDirPath}/fake-tmp-file.json`;\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('checkFlowStatus does not catch arbitrary errors', async function (t) {\n  const exec = sinon.stub();\n  const writeFile = sinon.stub();\n  const tempPath = sinon.stub();\n\n  mockRequire(NPM_TEMP, {path: tempPath});\n  mockRequire(LIB_PROMISIFIED, {exec, writeFile});\n\n  tempPath.onFirstCall()\n          .returns(tmpFilePath);\n  exec.onFirstCall()\n      .returns(Promise.resolve({\n        err: new Error('Fake flow status error')\n      }));\n\n  const flow = mockRequire.reRequire(LIB_FLOW);\n\n  t.is(tempPath.callCount, 0);\n\n  await t.throws(\n    flow.checkFlowStatus('flow', '/fake/projectDir/', tmpDirPath),\n    'Fake flow status error'\n  );\n\n  t.true(exec.calledOnce);\n  t.is(exec.firstCall.args[0], `flow status --json`);\n  t.deepEqual(exec.firstCall.args[1], {\n    cwd: '/fake/projectDir/',\n    maxBuffer: Infinity\n  });\n  t.deepEqual(exec.firstCall.args[2], {dontReject: true});\n\n  // No file should be created if the VERBOSE and\n  // DEBUG_DUMP_JSON env var are not set\n  t.is(tempPath.callCount, 0);\n  t.is(writeFile.callCount, 0);\n});\n\ntest('checkFlowStatus resolves to flow types errors in json format',\n  async function (t) {\n    const exec = sinon.stub();\n    const writeFile = sinon.stub();\n    const tempPath = sinon.stub();\n\n    mockRequire(NPM_TEMP, {path: tempPath});\n    mockRequire(LIB_PROMISIFIED, {exec, writeFile});\n\n    const fakeJSONStatusReply = {\n      passed: false,\n      flowVersion: '0.30.0',\n      errors: []\n    };\n\n    tempPath.onCall().returns(tmpFilePath);\n    exec.onFirstCall().returns(Promise.resolve({\n      err: {code: 2},\n      stdout: JSON.stringify(fakeJSONStatusReply)\n    }));\n    exec.onSecondCall().returns(Promise.resolve({err: {code: 2}, stdout: ''}));\n\n    const flow = mockRequire.reRequire(LIB_FLOW);\n\n    const res = await flow.checkFlowStatus('flow', '/fake/projectDir/', tmpDirPath);\n\n    t.deepEqual(res, fakeJSONStatusReply);\n\n    await t.throws(\n      flow.checkFlowStatus('flow', '/fake/projectDir/', tmpDirPath),\n      /Parsing error on Flow status JSON result: SyntaxError: Unexpected end/\n    );\n  }\n);\n\ntest('checkFlowStatus rejects on invalid flow status json format',\n  async function (t) {\n    const exec = sinon.stub();\n    const tempPath = sinon.stub();\n\n    mockRequire(NPM_TEMP, {path: tempPath});\n    mockRequire(LIB_PROMISIFIED, {exec});\n\n    const fakeJSONStatusReply = {\n      notFlowStatusJSON: true\n    };\n\n    exec.onFirstCall().returns(Promise.resolve({\n      stdout: JSON.stringify(fakeJSONStatusReply)\n    }));\n\n    const flow = mockRequire.reRequire(LIB_FLOW);\n    await t.throws(\n      flow.checkFlowStatus('flow', '/fake/projectDir/'),\n      'Invalid Flow status JSON format'\n    );\n  }\n);\n\ntest('collectFlowCoverageForFile collects flow command exit errors', async function (t) {\n  const exec = sinon.stub();\n  const tempPath = sinon.stub();\n  const writeFile = sinon.stub();\n\n  mockRequire(NPM_TEMP, {path: tempPath});\n  mockRequire(LIB_PROMISIFIED, {exec, writeFile});\n\n  const fakeExecError = {\n    err: {\n      message: 'Fake flow error without stdout',\n      code: 2\n    }\n  };\n\n  exec.onFirstCall().returns(Promise.resolve(fakeExecError));\n\n  const flow = mockRequire.reRequire(LIB_FLOW);\n  const filename = 'src/fakeFilename.js';\n\n  const collectData = await flow.collectFlowCoverageForFile(\n      'flow', '/fake/projectDir/', filename, tmpDirPath\n    );\n\n  // Expect a flow coverage exception in the collected data.\n  t.true(collectData.isError);\n  t.is(collectData.flowCoverageException, fakeExecError.err.message);\n\n  // Expect empty flow coverage data when a coverage exception has been collected.\n  t.deepEqual(collectData.expressions, {\n    /* eslint-disable camelcase */\n    covered_count: 0,\n    uncovered_count: 0,\n    uncovered_locs: []\n    /* eslint-enable camelcase */\n  });\n\n  t.true(exec.calledOnce);\n  t.is(writeFile.callCount, 0);\n});\n\ntest('collectFlowCoverageForFile collects parsing errors', async function (t) {\n  const exec = sinon.stub();\n  const tempPath = sinon.stub();\n  const writeFile = sinon.stub();\n\n  mockRequire(NPM_TEMP, {path: tempPath});\n  mockRequire(LIB_PROMISIFIED, {exec, writeFile});\n\n  exec.onFirstCall().returns(Promise.resolve({\n    stdout: '{'\n  }));\n\n  const flow = mockRequire.reRequire(LIB_FLOW);\n  const filename = 'src/fakeFilename.js';\n\n  const collectData = await flow.collectFlowCoverageForFile(\n      'flow', '/fake/projectDir/', filename, tmpDirPath\n    );\n\n  let expectedParsingError;\n  try {\n    JSON.parse('{');\n  } catch (err) {\n    expectedParsingError = err;\n  }\n\n  // Expect a flow coverage exception in the collected data.\n  t.true(collectData.isError);\n  t.is(collectData.flowCoverageParsingError, expectedParsingError.message);\n\n  // Expect empty flow coverage data when a coverage exception has been collected.\n  t.deepEqual(collectData.expressions, {\n    /* eslint-disable camelcase */\n    covered_count: 0,\n    uncovered_count: 0,\n    uncovered_locs: []\n    /* eslint-enable camelcase */\n  });\n\n  t.true(exec.calledOnce);\n  t.is(writeFile.callCount, 0);\n});\n\ntest('collectFlowCoverageForFile collects coverage errors', async function (t) {\n  const exec = sinon.stub();\n  const tempPath = sinon.stub();\n  const writeFile = sinon.stub();\n\n  mockRequire(NPM_TEMP, {path: tempPath});\n  mockRequire(LIB_PROMISIFIED, {exec, writeFile});\n\n  exec.onFirstCall().returns(Promise.resolve({\n    stderr: '{\"error\": \"Fake flow coverage message\"}'\n  }));\n\n  const flow = mockRequire.reRequire(LIB_FLOW);\n  const filename = 'src/fakeFilename.js';\n\n  const collectData = await flow.collectFlowCoverageForFile(\n      'flow', '/fake/projectDir/', filename, tmpDirPath\n    );\n\n  // Expect a flow coverage exception in the collected data.\n  t.true(collectData.isError);\n  t.is(collectData.flowCoverageError, 'Fake flow coverage message');\n\n  // Expect empty flow coverage data when a coverage exception has been collected.\n  t.deepEqual(collectData.expressions, {\n    /* eslint-disable camelcase */\n    covered_count: 0,\n    uncovered_count: 0,\n    uncovered_locs: []\n    /* eslint-enable camelcase */\n  });\n\n  t.true(exec.calledOnce);\n  t.is(writeFile.callCount, 0);\n});\n\ntest('collectFlowCoverageForFile resolve coverage data', async function (t) {\n  const exec = sinon.stub();\n  const writeFile = sinon.stub();\n  const tempPath = sinon.stub();\n\n  mockRequire(NPM_TEMP, {path: tempPath});\n  mockRequire(LIB_PROMISIFIED, {exec, writeFile});\n\n  const filename = 'src/fakeFilename.js';\n  const fakeFlowCoverageData = {\n    filename,\n    fakeCoverageData: {\n      ok: true\n    }\n  };\n\n  tempPath.onFirstCall().returns(tmpFilePath);\n  exec.onFirstCall().returns(Promise.resolve({\n    stdout: new Buffer(JSON.stringify(fakeFlowCoverageData))\n  }));\n\n  const flow = mockRequire.reRequire(LIB_FLOW);\n\n  const res = await flow.collectFlowCoverageForFile(\n    'flow', DEFAULT_FLOW_TIMEOUT, '/fake/projectDir', filename\n  );\n\n  t.is(writeFile.callCount, 0);\n  t.true(exec.calledOnce);\n  t.is(exec.firstCall.args[0], `flow coverage --json ${filename}`);\n  t.deepEqual(exec.firstCall.args[1], {\n    cwd: '/fake/projectDir', maxBuffer: Infinity, timeout: DEFAULT_FLOW_TIMEOUT\n  });\n  t.deepEqual(res, fakeFlowCoverageData);\n});\n\ntest('collectFlowCoverage', async function (t) {\n  const exec = sinon.stub();\n  const writeFile = sinon.stub();\n  const tempPath = sinon.stub();\n  const glob = sinon.stub();\n\n  mockRequire(NPM_TEMP, {path: tempPath});\n  mockRequire(LIB_PROMISIFIED, {exec, glob, writeFile});\n\n  const fakeFlowStatus = {\n    passed: true,\n    errors: [],\n    flowVersion: '0.30.0'\n  };\n\n  const firstGlobResults = ['src/a.js', 'src/b.js', 'test/test-a.js'];\n  const secondGlobResults = ['src/d1/c.js', 'src/d1/d.js', 'test/subdir/test-d.js'];\n\n  // Fake reply to flow status command.\n  exec.onCall(0).returns(Promise.resolve({\n    stdout: JSON.stringify(fakeFlowStatus)\n  }));\n\n  // Fake the glob results.\n  glob.onCall(0).returns(Promise.resolve(firstGlobResults));\n  glob.onCall(1).returns(Promise.resolve(secondGlobResults));\n\n  const allFiles = [].concat(firstGlobResults, secondGlobResults);\n\n  // Fake the flow coverage commands results.\n  for (var i = 1; i <= allFiles.length; i++) {\n    exec.onCall(i).returns(Promise.resolve({\n      stdout: JSON.stringify({\n        /* eslint-disable camelcase */\n        expressions: {\n          covered_count: 1,\n          uncovered_count: 1,\n          uncovered_locs: [{\n            start: {\n              source: allFiles[i],\n              line: 1,\n              column: 1,\n              offset: 10\n            },\n            end: {\n              source: allFiles[i],\n              line: 2,\n              column: 2,\n              offset: 30\n            }\n          }]\n        }\n        /* eslint-enable camelcase */\n      })\n    }));\n  }\n\n  const flow = mockRequire.reRequire(LIB_FLOW);\n\n  const globIncludePatterns = [\n    'src/*.js', 'src/*/*.js'\n  ];\n\n  const globExcludePatterns = [\n    'test/**'\n  ];\n\n  const res = await flow.collectFlowCoverage(\n    'flow', DEFAULT_FLOW_TIMEOUT, '/projectDir',\n    globIncludePatterns, globExcludePatterns,\n    80, 5\n  );\n\n  t.is(typeof res.generatedAt, 'string');\n  delete res.generatedAt;\n\n  const resFiles = res.files;\n  delete res.files;\n\n  t.deepEqual(res, {\n    flowStatus: {...fakeFlowStatus},\n    globIncludePatterns,\n    globExcludePatterns,\n    concurrentFiles: 5,\n    percent: 50,\n    threshold: 80,\n    /* eslint-disable camelcase */\n    covered_count: 4,\n    uncovered_count: 4\n    /* eslint-enable camelcase */\n  });\n\n  const filteredFiles = allFiles.filter(\n    file => !minimatch(file, globExcludePatterns[0])\n  ).sort();\n\n  t.deepEqual(Object.keys(resFiles).sort(), filteredFiles);\n\n  for (const filename of filteredFiles) {\n    t.deepEqual(resFiles[filename].expressions.uncovered_locs, [{\n      start: {\n        line: 1,\n        column: 1,\n        offset: 10\n      },\n      end: {\n        line: 2,\n        column: 2,\n        offset: 30\n      }\n    }]);\n    delete resFiles[filename].expressions.uncovered_locs;\n    t.deepEqual(resFiles[filename], {\n      percent: 50,\n      filename,\n      expressions: {\n        /* eslint-disable camelcase */\n        covered_count: 1,\n        uncovered_count: 1\n        /* eslint-enable camelcase */\n      }\n    });\n  }\n\n  t.is(writeFile.callCount, 0);\n  t.is(exec.callCount, 5);\n  t.is(glob.callCount, 2);\n});\n\ntest('getCoveredPercent', function (t) {\n  const flow = mockRequire.reRequire(LIB_FLOW);\n\n  /* eslint-disable camelcase */\n  t.is(flow.getCoveredPercent({covered_count: 0, uncovered_count: 0}), 100);\n  t.is(flow.getCoveredPercent({covered_count: 0, uncovered_count: 10}), 0);\n  t.is(flow.getCoveredPercent({covered_count: 3, uncovered_count: 11}), 21);\n  /* eslint-enable camelcase */\n});\n"]}