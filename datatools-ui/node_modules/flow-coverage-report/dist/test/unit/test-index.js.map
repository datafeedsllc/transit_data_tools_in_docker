{"version":3,"sources":["../../../src/test/unit/test-index.js"],"names":["LIB_INDEX","LIB_FLOW","LIB_REPORT_HTML","LIB_REPORT_JSON","LIB_REPORT_TEXT","afterEach","stopAll","t","collectFlowCoverage","stub","generateHTML","generate","generateJSON","generateText","reRequire","generateFlowCoverageReport","fakeData","returns","Promise","resolve","options","projectDir","globIncludePatterns","threshold","res","deepEqual","true","calledOnce","false","reportTypes","is","callCount","throws"],"mappings":";AAAA;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,YAAY,iBAAlB;AACA,IAAMC,WAAW,gBAAjB;AACA,IAAMC,kBAAkB,uBAAxB;AACA,IAAMC,kBAAkB,uBAAxB;AACA,IAAMC,kBAAkB,uBAAxB;;AAEA,UAAKC,SAAL,CAAe,YAAM;AACnB,wBAAYC,OAAZ;AACD,CAFD;;AAIA,eAAK,4BAAL;AAAA,wEAAmC,iBAAeC,CAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3BC,+BAD2B,GACL,gBAAMC,IAAN,EADK;;AAEjC,uCAAYR,QAAZ,EAAsB,EAACO,wCAAD,EAAtB;;AAEME,wBAJ2B,GAIZ,gBAAMD,IAAN,EAJY;;AAKjC,uCAAYP,eAAZ,EAA6B,EAACS,UAAUD,YAAX,EAA7B;AACME,wBAN2B,GAMZ,gBAAMH,IAAN,EANY;;AAOjC,uCAAYN,eAAZ,EAA6B,EAACQ,UAAUC,YAAX,EAA7B;AACMC,wBAR2B,GAQZ,gBAAMJ,IAAN,EARY;;AASjC,uCAAYL,eAAZ,EAA6B,EAACO,UAAUE,YAAX,EAA7B;;AATiC,oCAWI,sBAAYC,SAAZ,CAAsBd,SAAtB,CAXJ,EAW1Be,0BAX0B,yBAW1BA,0BAX0B;AAa3BC,oBAb2B,GAahB,EAACA,UAAU,IAAX,EAbgB;;AAcjCR,gCAAoBS,OAApB,CAA4BC,QAAQC,OAAR,CAAgBH,QAAhB,CAA5B;;AAEAJ,yBAAaK,OAAb,CAAqBC,QAAQC,OAAR,EAArB;AACAT,yBAAaO,OAAb,CAAqBC,QAAQC,OAAR,EAArB;AACAN,yBAAaI,OAAb,CAAqBC,QAAQC,OAAR,EAArB;;AAEMC,mBApB2B,GAoBjB;AACdC,0BAAY,aADE;AAEdC,mCAAqB,CAAC,UAAD,CAFP;AAGdC,yBAAW;AAHG,aApBiB;AAAA;AAAA,mBA0BjBR,2BAA2BK,OAA3B,CA1BiB;;AAAA;AA0B7BI,eA1B6B;;;AA4BjCjB,cAAEkB,SAAF,CAAYD,GAAZ,EAAiB,CAACR,QAAD,EAAWI,OAAX,CAAjB;AACAb,cAAEmB,IAAF,CAAOlB,oBAAoBmB,UAA3B;AACApB,cAAEmB,IAAF,CAAOb,aAAac,UAApB;AACApB,cAAEqB,KAAF,CAAQlB,aAAaiB,UAArB;AACApB,cAAEqB,KAAF,CAAQhB,aAAae,UAArB;;AAhCiC;AAAA,mBAkC3BZ,sDACDK,OADC;AAEJS,2BAAa,CAAC,MAAD,EAAS,MAAT;AAFT,eAlC2B;;AAAA;;AAuCjCtB,cAAEmB,IAAF,CAAOhB,aAAaiB,UAApB;AACApB,cAAEmB,IAAF,CAAOd,aAAae,UAApB;AACApB,cAAEuB,EAAF,CAAKjB,aAAakB,SAAlB,EAA6B,CAA7B;;AAzCiC;AAAA,mBA2C3BxB,EAAEyB,MAAF,CACJjB,sDAA+BK,OAA/B,IAAwCC,YAAY,IAApD,IADI,EAEJ,gCAFI,CA3C2B;;AAAA;AAAA;AAAA,mBAgD3Bd,EAAEyB,MAAF,CACJjB,sDAA+BK,OAA/B,IAAwCE,qBAAqB,IAA7D,IADI,EAEJ,kCAFI,CAhD2B;;AAAA;AAAA;AAAA,mBAqD3Bf,EAAEyB,MAAF,CACJjB,sDAA+BK,OAA/B,IAAwCE,qBAAqB,EAA7D,IADI,EAEJ,kCAFI,CArD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA","file":"test-index.js","sourcesContent":["'use babel';\n\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nconst LIB_INDEX = '../../lib/index';\nconst LIB_FLOW = '../../lib/flow';\nconst LIB_REPORT_HTML = '../../lib/report-html';\nconst LIB_REPORT_JSON = '../../lib/report-json';\nconst LIB_REPORT_TEXT = '../../lib/report-text';\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('generateFlowCoverageReport', async function(t) {\n  const collectFlowCoverage = sinon.stub();\n  mockRequire(LIB_FLOW, {collectFlowCoverage});\n\n  const generateHTML = sinon.stub();\n  mockRequire(LIB_REPORT_HTML, {generate: generateHTML});\n  const generateJSON = sinon.stub();\n  mockRequire(LIB_REPORT_JSON, {generate: generateJSON});\n  const generateText = sinon.stub();\n  mockRequire(LIB_REPORT_TEXT, {generate: generateText});\n\n  const {generateFlowCoverageReport} = mockRequire.reRequire(LIB_INDEX);\n\n  const fakeData = {fakeData: true};\n  collectFlowCoverage.returns(Promise.resolve(fakeData));\n\n  generateJSON.returns(Promise.resolve());\n  generateHTML.returns(Promise.resolve());\n  generateText.returns(Promise.resolve());\n\n  const options = {\n    projectDir: '/projectDir',\n    globIncludePatterns: ['src/*.js'],\n    threshold: 80\n  };\n\n  let res = await generateFlowCoverageReport(options);\n\n  t.deepEqual(res, [fakeData, options]);\n  t.true(collectFlowCoverage.calledOnce);\n  t.true(generateText.calledOnce);\n  t.false(generateHTML.calledOnce);\n  t.false(generateJSON.calledOnce);\n\n  await generateFlowCoverageReport({\n    ...options,\n    reportTypes: ['html', 'json']\n  });\n\n  t.true(generateHTML.calledOnce);\n  t.true(generateJSON.calledOnce);\n  t.is(generateText.callCount, 1);\n\n  await t.throws(\n    generateFlowCoverageReport({...options, projectDir: null}),\n    /projectDir option is mandatory/\n  );\n\n  await t.throws(\n    generateFlowCoverageReport({...options, globIncludePatterns: null}),\n    /empty globIncludePatterns option/\n  );\n\n  await t.throws(\n    generateFlowCoverageReport({...options, globIncludePatterns: []}),\n    /empty globIncludePatterns option/\n  );\n});\n"]}