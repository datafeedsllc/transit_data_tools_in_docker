{"version":3,"sources":["../../../../src/test/unit/test-promisified/test-mkdirp.js"],"names":["LIB_PROMISIFIED","afterEach","stopAll","t","mkdirpStub","stub","onFirstCall","callsArg","onSecondCall","callsArgWith","Error","promisified","reRequire","notThrows","mkdirp","true","calledOnce","throws","calledTwice"],"mappings":";AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,kBAAkB,0BAAxB;;AAEA,UAAKC,SAAL,CAAe,YAAM;AACnB,wBAAYC,OAAZ;AACD,CAFD;;AAIA,eAAK,iBAAL;AAAA,wEAAwB,kBAAeC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,sBADgB,GACH,gBAAMC,IAAN,EADG;;AAEtB,uCAAY,QAAZ,EAAsBD,UAAtB;;AAEAA,uBACGE,WADH,GACiBC,QADjB,CAC0B,CAD1B,EAEGC,YAFH,GAEkBC,YAFlB,CAE+B,CAF/B,EAEkC,IAAIC,KAAJ,CAAU,kBAAV,CAFlC;;AAIMC,uBARgB,GAQF,sBAAYC,SAAZ,CAAsBZ,eAAtB,CARE;AAAA;AAAA,mBAUhBG,EAAEU,SAAF,4DAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACVF,YAAYG,MAAZ,CAAmB,cAAnB,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ,GAVgB;;AAAA;;AActBX,cAAEY,IAAF,CAAOX,WAAWY,UAAlB;;AAdsB;AAAA,mBAgBhBb,EAAEc,MAAF,CAASN,YAAYG,MAAZ,CAAmB,cAAnB,CAAT,EAA6C,kBAA7C,CAhBgB;;AAAA;;AAkBtBX,cAAEY,IAAF,CAAOX,WAAWc,WAAlB;;AAlBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA","file":"test-mkdirp.js","sourcesContent":["'use babel';\n\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nconst LIB_PROMISIFIED = '../../../lib/promisified';\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('promised mkdirp', async function(t) {\n  const mkdirpStub = sinon.stub();\n  mockRequire('mkdirp', mkdirpStub);\n\n  mkdirpStub\n    .onFirstCall().callsArg(1)\n    .onSecondCall().callsArgWith(1, new Error('Fake mkdir error'));\n\n  const promisified = mockRequire.reRequire(LIB_PROMISIFIED);\n\n  await t.notThrows(async function () {\n    await promisified.mkdirp('/my/fake/dir');\n  });\n\n  t.true(mkdirpStub.calledOnce);\n\n  await t.throws(promisified.mkdirp('/my/fake/dir'), 'Fake mkdir error');\n\n  t.true(mkdirpStub.calledTwice);\n});\n"]}