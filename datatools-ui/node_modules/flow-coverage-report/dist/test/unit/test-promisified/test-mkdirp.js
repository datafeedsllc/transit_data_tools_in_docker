'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_PROMISIFIED = '../../../lib/promisified';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('promised mkdirp', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(t) {
    var mkdirpStub, promisified;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mkdirpStub = _sinon2.default.stub();

            (0, _mockRequire2.default)('mkdirp', mkdirpStub);

            mkdirpStub.onFirstCall().callsArg(1).onSecondCall().callsArgWith(1, new Error('Fake mkdir error'));

            promisified = _mockRequire2.default.reRequire(LIB_PROMISIFIED);
            _context2.next = 6;
            return t.notThrows((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return promisified.mkdirp('/my/fake/dir');

                    case 2:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, this);
            })));

          case 6:

            t.true(mkdirpStub.calledOnce);

            _context2.next = 9;
            return t.throws(promisified.mkdirp('/my/fake/dir'), 'Fake mkdir error');

          case 9:

            t.true(mkdirpStub.calledTwice);

          case 10:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
//# sourceMappingURL=test-mkdirp.js.map