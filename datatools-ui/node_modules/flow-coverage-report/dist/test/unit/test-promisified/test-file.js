'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_PROMISIFIED = '../../../lib/promisified';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('promised readFile', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(t) {
    var readFile, fakeFileContent, promisified;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            readFile = _sinon2.default.stub();

            (0, _mockRequire2.default)('fs', { readFile: readFile });

            fakeFileContent = 'file content';

            readFile.onFirstCall().callsArgWith(1, null, new Buffer(fakeFileContent)).onSecondCall().callsArgWith(1, new Error('Fake readFile error'));

            promisified = _mockRequire2.default.reRequire(LIB_PROMISIFIED);
            _context2.next = 7;
            return t.notThrows((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
              var fileContent;
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return promisified.readFile('/my/fake/dir');

                    case 2:
                      fileContent = _context.sent;

                      t.true(fileContent instanceof Buffer);
                      t.is(String(fileContent), fakeFileContent);

                    case 5:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, this);
            })));

          case 7:

            t.true(readFile.calledOnce);

            _context2.next = 10;
            return t.throws(promisified.readFile('/my/fake/file'), 'Fake readFile error');

          case 10:

            t.true(readFile.calledTwice);

          case 11:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

(0, _ava.test)('promised writeFile', function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(t) {
    var writeFile, promisified;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            writeFile = _sinon2.default.stub();

            (0, _mockRequire2.default)('fs', { writeFile: writeFile });

            writeFile.onFirstCall().callsArgWith(2, null).onSecondCall().callsArgWith(2, new Error('Fake writeFile error'));

            promisified = _mockRequire2.default.reRequire(LIB_PROMISIFIED);
            _context4.next = 6;
            return t.notThrows((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
              return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.next = 2;
                      return promisified.writeFile('/my/fake/dir');

                    case 2:
                    case 'end':
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            })));

          case 6:

            t.true(writeFile.calledOnce);

            _context4.next = 9;
            return t.throws(promisified.writeFile('/my/fake/file', 'Fake data'));

          case 9:

            t.true(writeFile.calledTwice);

          case 10:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}());
//# sourceMappingURL=test-file.js.map