'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _buffer = require('buffer');

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_PROMISIFIED = '../../../lib/promisified';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('promisified exec resolved', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(t) {
    var exec, promisified;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            exec = _sinon2.default.stub();

            (0, _mockRequire2.default)('child_process', { exec: exec });

            exec.onFirstCall().callsArgWith(2, null, new _buffer.Buffer('stdout'), new _buffer.Buffer('stderr'));

            promisified = _mockRequire2.default.reRequire(LIB_PROMISIFIED);
            _context2.next = 6;
            return t.notThrows((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
              var _ref3, stdout, stderr;

              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return promisified.exec('fake-executable --fake', { cwd: '/fake/dir' });

                    case 2:
                      _ref3 = _context.sent;
                      stdout = _ref3.stdout;
                      stderr = _ref3.stderr;


                      t.true(exec.calledOnce);
                      t.is(exec.firstCall.args[0], 'fake-executable --fake');
                      t.deepEqual(exec.firstCall.args[1], { cwd: '/fake/dir' });

                      t.true(stdout instanceof _buffer.Buffer);
                      t.true(stderr instanceof _buffer.Buffer);
                      t.is(String(stdout), 'stdout');
                      t.is(String(stderr), 'stderr');

                    case 12:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, this);
            })));

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

(0, _ava.test)('promisified exec throws', function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(t) {
    var exec, fakeErrorMessage, promisified;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            exec = _sinon2.default.stub();

            (0, _mockRequire2.default)('child_process', { exec: exec });

            fakeErrorMessage = 'Fake Unknown Error';

            exec.onFirstCall().callsArgWith(2, new Error(fakeErrorMessage));
            promisified = _mockRequire2.default.reRequire(LIB_PROMISIFIED);
            _context3.next = 7;
            return t.throws(promisified.exec('fake-executable --fake', { cwd: '/fake/dir' }), fakeErrorMessage);

          case 7:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
}());

(0, _ava.test)('promisified exec doNotReject', function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(t) {
    var exec, fakeStdout, fakeStderr, fakeErrorMessage, promisified, _ref6, err, stdout, stderr;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            exec = _sinon2.default.stub();

            (0, _mockRequire2.default)('child_process', { exec: exec });

            fakeStdout = new _buffer.Buffer('stdout');
            fakeStderr = new _buffer.Buffer('stderr');
            fakeErrorMessage = 'Fake Unknown Error';

            exec.onFirstCall().callsArgWith(2, new Error(fakeErrorMessage), fakeStdout, fakeStderr);

            promisified = _mockRequire2.default.reRequire(LIB_PROMISIFIED);
            _context4.next = 9;
            return promisified.exec('fake-executable --fake', { cwd: '/fake/dir' }, { dontReject: true });

          case 9:
            _ref6 = _context4.sent;
            err = _ref6.err;
            stdout = _ref6.stdout;
            stderr = _ref6.stderr;


            t.is(err.message, fakeErrorMessage);
            t.true(stdout instanceof _buffer.Buffer);
            t.true(stderr instanceof _buffer.Buffer);
            t.is(String(stdout), 'stdout');
            t.is(String(stderr), 'stderr');

          case 18:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x3) {
    return _ref5.apply(this, arguments);
  };
}());
//# sourceMappingURL=test-exec.js.map