{"version":3,"sources":["../../../../src/test/unit/test-promisified/test-exec.js"],"names":["LIB_PROMISIFIED","afterEach","stopAll","t","exec","stub","onFirstCall","callsArgWith","promisified","reRequire","notThrows","cwd","stdout","stderr","true","calledOnce","is","firstCall","args","deepEqual","String","fakeErrorMessage","Error","throws","fakeStdout","fakeStderr","dontReject","err","message"],"mappings":"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","file":"test-exec.js","sourcesContent":["'use babel';\n\nimport {Buffer} from 'buffer';\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nconst LIB_PROMISIFIED = '../../../lib/promisified';\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('promisified exec resolved', async function(t) {\n  const exec = sinon.stub();\n  mockRequire('child_process', {exec});\n\n  exec.onFirstCall()\n      .callsArgWith(2, null, new Buffer('stdout'), new Buffer('stderr'));\n\n  const promisified = mockRequire.reRequire(LIB_PROMISIFIED);\n\n  await t.notThrows(async function () {\n    const {\n      stdout, stderr\n    } = await promisified.exec('fake-executable --fake', {cwd: '/fake/dir'});\n\n    t.true(exec.calledOnce);\n    t.is(exec.firstCall.args[0], 'fake-executable --fake');\n    t.deepEqual(exec.firstCall.args[1], {cwd: '/fake/dir'});\n\n    t.true(stdout instanceof Buffer);\n    t.true(stderr instanceof Buffer);\n    t.is(String(stdout), 'stdout');\n    t.is(String(stderr), 'stderr');\n  });\n});\n\ntest('promisified exec throws', async function(t) {\n  const exec = sinon.stub();\n  mockRequire('child_process', {exec});\n\n  const fakeErrorMessage = 'Fake Unknown Error';\n  exec.onFirstCall()\n      .callsArgWith(2, new Error(fakeErrorMessage));\n  const promisified = mockRequire.reRequire(LIB_PROMISIFIED);\n\n  await t.throws(\n    promisified.exec('fake-executable --fake', {cwd: '/fake/dir'}),\n    fakeErrorMessage\n  );\n});\n\ntest('promisified exec doNotReject', async function(t) {\n  const exec = sinon.stub();\n  mockRequire('child_process', {exec});\n\n  const fakeStdout = new Buffer('stdout');\n  const fakeStderr = new Buffer('stderr');\n  const fakeErrorMessage = 'Fake Unknown Error';\n  exec.onFirstCall()\n    .callsArgWith(2, new Error(fakeErrorMessage), fakeStdout, fakeStderr);\n\n  const promisified = mockRequire.reRequire(LIB_PROMISIFIED);\n\n  const {err, stdout, stderr} = await promisified.exec(\n    'fake-executable --fake',\n    {cwd: '/fake/dir'}, {dontReject: true}\n  );\n\n  t.is(err.message, fakeErrorMessage);\n  t.true(stdout instanceof Buffer);\n  t.true(stderr instanceof Buffer);\n  t.is(String(stdout), 'stdout');\n  t.is(String(stderr), 'stderr');\n});\n"]}