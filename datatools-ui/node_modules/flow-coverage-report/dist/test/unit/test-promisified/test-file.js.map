{"version":3,"sources":["../../../../src/test/unit/test-promisified/test-file.js"],"names":["LIB_PROMISIFIED","afterEach","stopAll","t","readFile","stub","fakeFileContent","onFirstCall","callsArgWith","Buffer","onSecondCall","Error","promisified","reRequire","notThrows","fileContent","true","is","String","calledOnce","throws","calledTwice","writeFile"],"mappings":";AAAA;;;;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,kBAAkB,0BAAxB;;AAEA,UAAKC,SAAL,CAAe,YAAM;AACnB,wBAAYC,OAAZ;AACD,CAFD;;AAIA,eAAK,mBAAL;AAAA,wEAA0B,kBAAeC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,oBADkB,GACP,gBAAMC,IAAN,EADO;;AAExB,uCAAY,IAAZ,EAAkB,EAACD,kBAAD,EAAlB;;AAEME,2BAJkB,GAIA,cAJA;;AAKxBF,qBACGG,WADH,GACiBC,YADjB,CAC8B,CAD9B,EACiC,IADjC,EACuC,IAAIC,MAAJ,CAAWH,eAAX,CADvC,EAEGI,YAFH,GAEkBF,YAFlB,CAE+B,CAF/B,EAEkC,IAAIG,KAAJ,CAAU,qBAAV,CAFlC;;AAIMC,uBATkB,GASJ,sBAAYC,SAAZ,CAAsBb,eAAtB,CATI;AAAA;AAAA,mBAWlBG,EAAEW,SAAF,4DAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACUF,YAAYR,QAAZ,CAAqB,cAArB,CADV;;AAAA;AACVW,iCADU;;AAEhBZ,wBAAEa,IAAF,CAAOD,uBAAuBN,MAA9B;AACAN,wBAAEc,EAAF,CAAKC,OAAOH,WAAP,CAAL,EAA0BT,eAA1B;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ,GAXkB;;AAAA;;AAiBxBH,cAAEa,IAAF,CAAOZ,SAASe,UAAhB;;AAjBwB;AAAA,mBAmBlBhB,EAAEiB,MAAF,CAASR,YAAYR,QAAZ,CAAqB,eAArB,CAAT,EAAgD,qBAAhD,CAnBkB;;AAAA;;AAqBxBD,cAAEa,IAAF,CAAOZ,SAASiB,WAAhB;;AArBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AAwBA,eAAK,oBAAL;AAAA,yEAA2B,kBAAelB,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBmB,qBADmB,GACP,gBAAMjB,IAAN,EADO;;AAEzB,uCAAY,IAAZ,EAAkB,EAACiB,oBAAD,EAAlB;;AAEAA,sBACGf,WADH,GACiBC,YADjB,CAC8B,CAD9B,EACiC,IADjC,EAEGE,YAFH,GAEkBF,YAFlB,CAE+B,CAF/B,EAEkC,IAAIG,KAAJ,CAAU,sBAAV,CAFlC;;AAIMC,uBARmB,GAQL,sBAAYC,SAAZ,CAAsBb,eAAtB,CARK;AAAA;AAAA,mBAUnBG,EAAEW,SAAF,4DAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACVF,YAAYU,SAAZ,CAAsB,cAAtB,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAZ,GAVmB;;AAAA;;AAczBnB,cAAEa,IAAF,CAAOM,UAAUH,UAAjB;;AAdyB;AAAA,mBAgBnBhB,EAAEiB,MAAF,CAASR,YAAYU,SAAZ,CAAsB,eAAtB,EAAuC,WAAvC,CAAT,CAhBmB;;AAAA;;AAkBzBnB,cAAEa,IAAF,CAAOM,UAAUD,WAAjB;;AAlByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA","file":"test-file.js","sourcesContent":["'use babel';\n\nimport mockRequire from 'mock-require';\nimport sinon from 'sinon';\n\nimport {test} from 'ava';\n\nconst LIB_PROMISIFIED = '../../../lib/promisified';\n\ntest.afterEach(() => {\n  mockRequire.stopAll();\n});\n\ntest('promised readFile', async function(t) {\n  const readFile = sinon.stub();\n  mockRequire('fs', {readFile});\n\n  const fakeFileContent = 'file content';\n  readFile\n    .onFirstCall().callsArgWith(1, null, new Buffer(fakeFileContent))\n    .onSecondCall().callsArgWith(1, new Error('Fake readFile error'));\n\n  const promisified = mockRequire.reRequire(LIB_PROMISIFIED);\n\n  await t.notThrows(async function () {\n    const fileContent = await promisified.readFile('/my/fake/dir');\n    t.true(fileContent instanceof Buffer);\n    t.is(String(fileContent), fakeFileContent);\n  });\n\n  t.true(readFile.calledOnce);\n\n  await t.throws(promisified.readFile('/my/fake/file'), 'Fake readFile error');\n\n  t.true(readFile.calledTwice);\n});\n\ntest('promised writeFile', async function(t) {\n  const writeFile = sinon.stub();\n  mockRequire('fs', {writeFile});\n\n  writeFile\n    .onFirstCall().callsArgWith(2, null)\n    .onSecondCall().callsArgWith(2, new Error('Fake writeFile error'));\n\n  const promisified = mockRequire.reRequire(LIB_PROMISIFIED);\n\n  await t.notThrows(async function () {\n    await promisified.writeFile('/my/fake/dir');\n  });\n\n  t.true(writeFile.calledOnce);\n\n  await t.throws(promisified.writeFile('/my/fake/file', 'Fake data'));\n\n  t.true(writeFile.calledTwice);\n});\n"]}