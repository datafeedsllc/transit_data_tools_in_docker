'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_INDEX = '../../lib/index';
var LIB_FLOW = '../../lib/flow';
var LIB_REPORT_HTML = '../../lib/report-html';
var LIB_REPORT_JSON = '../../lib/report-json';
var LIB_REPORT_TEXT = '../../lib/report-text';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('generateFlowCoverageReport', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(t) {
    var collectFlowCoverage, generateHTML, generateJSON, generateText, _mockRequire$reRequir, generateFlowCoverageReport, fakeData, options, res;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            collectFlowCoverage = _sinon2.default.stub();

            (0, _mockRequire2.default)(LIB_FLOW, { collectFlowCoverage: collectFlowCoverage });

            generateHTML = _sinon2.default.stub();

            (0, _mockRequire2.default)(LIB_REPORT_HTML, { generate: generateHTML });
            generateJSON = _sinon2.default.stub();

            (0, _mockRequire2.default)(LIB_REPORT_JSON, { generate: generateJSON });
            generateText = _sinon2.default.stub();

            (0, _mockRequire2.default)(LIB_REPORT_TEXT, { generate: generateText });

            _mockRequire$reRequir = _mockRequire2.default.reRequire(LIB_INDEX), generateFlowCoverageReport = _mockRequire$reRequir.generateFlowCoverageReport;
            fakeData = { fakeData: true };

            collectFlowCoverage.returns(Promise.resolve(fakeData));

            generateJSON.returns(Promise.resolve());
            generateHTML.returns(Promise.resolve());
            generateText.returns(Promise.resolve());

            options = {
              projectDir: '/projectDir',
              globIncludePatterns: ['src/*.js'],
              threshold: 80
            };
            _context.next = 17;
            return generateFlowCoverageReport(options);

          case 17:
            res = _context.sent;


            t.deepEqual(res, [fakeData, options]);
            t.true(collectFlowCoverage.calledOnce);
            t.true(generateText.calledOnce);
            t.false(generateHTML.calledOnce);
            t.false(generateJSON.calledOnce);

            _context.next = 25;
            return generateFlowCoverageReport((0, _extends3.default)({}, options, {
              reportTypes: ['html', 'json']
            }));

          case 25:

            t.true(generateHTML.calledOnce);
            t.true(generateJSON.calledOnce);
            t.is(generateText.callCount, 1);

            _context.next = 30;
            return t.throws(generateFlowCoverageReport((0, _extends3.default)({}, options, { projectDir: null })), /projectDir option is mandatory/);

          case 30:
            _context.next = 32;
            return t.throws(generateFlowCoverageReport((0, _extends3.default)({}, options, { globIncludePatterns: null })), /empty globIncludePatterns option/);

          case 32:
            _context.next = 34;
            return t.throws(generateFlowCoverageReport((0, _extends3.default)({}, options, { globIncludePatterns: [] })), /empty globIncludePatterns option/);

          case 34:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
//# sourceMappingURL=test-index.js.map