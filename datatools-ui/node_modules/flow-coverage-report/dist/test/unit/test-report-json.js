'use strict';
'use babel';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _mockRequire = require('mock-require');

var _mockRequire2 = _interopRequireDefault(_mockRequire);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ava = require('ava');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIB_REPORT_JSON = '../../lib/report-json';
var LIB_PROMISIFIED = '../../lib/promisified';

_ava.test.afterEach(function () {
  _mockRequire2.default.stopAll();
});

(0, _ava.test)('generate JSON report', function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(t) {
    var mkdirp, writeFile, reportJSON, fakeData, options;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mkdirp = _sinon2.default.stub();
            writeFile = _sinon2.default.stub();


            (0, _mockRequire2.default)(LIB_PROMISIFIED, { mkdirp: mkdirp, writeFile: writeFile });

            reportJSON = _mockRequire2.default.reRequire(LIB_REPORT_JSON);


            mkdirp.returns(Promise.resolve());
            writeFile.returns(Promise.resolve());

            fakeData = { fakeCoverageSummaryData: true };
            options = {
              projectDir: '/projectDir',
              globIncludePatterns: ['src/*.js']
            };
            _context.next = 10;
            return reportJSON.generate(fakeData, options);

          case 10:

            t.true(mkdirp.calledOnce);
            t.true(writeFile.calledOnce);

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava.test.todo('generate JSON report failures');
//# sourceMappingURL=test-report-json.js.map