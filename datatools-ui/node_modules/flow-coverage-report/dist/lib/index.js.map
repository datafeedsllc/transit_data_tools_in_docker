{"version":3,"sources":["../../src/lib/index.js"],"names":["opts","projectDir","tmpDirPath","process","env","VERBOSE","console","log","flowCommandPath","flowCommandTimeout","DEFAULT_FLOW_TIMEOUT","outputDir","isAbsolute","resolve","join","globIncludePatterns","globExcludePatterns","Array","isArray","Promise","reject","Error","length","threshold","concurrentFiles","coverageData","reportResults","reportTypes","indexOf","push","generate","then","all","generateFlowCoverageReport","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport path from 'path';\n\nimport {collectFlowCoverage} from './flow';\nimport {withTmpDir} from './promisified';\nimport reportHTML from './report-html';\nimport reportJSON from './report-json';\nimport reportText from './report-text';\n\nimport type {FlowCoverageSummaryData} from './flow'; // eslint-disable-line no-duplicate-imports\n\nexport type FlowCoverageReportType = 'json' | 'text' | 'html';\n\nexport type FlowCoverageReportOptions = {\n  projectDir: string,\n  flowCommandPath: string,\n  flowCommandTimeout: number,\n  globIncludePatterns: Array<string>,\n  globExcludePatterns: Array<string>,\n  outputDir: string,\n  reportTypes?: Array<FlowCoverageReportType>,\n  htmlTemplateOptions?: Object,\n  threshold?: number,\n  concurrentFiles?: number,\n  log: Function\n};\n\n// Default timeout for flow coverage commands.\nconst DEFAULT_FLOW_TIMEOUT = 15 * 1000;\n\n// User Scenarios\n// 1. generate text report from a project dir\n// 2. generate text report from a project dir and save json to file\n// 3. generate text report from a project dir and html report\n// 4. generate text/html report from a saved json file\n// 5. set a custom threshold\n// 6. set a custom output dir\n// 7. usa a saved json file to compute coverage trend (and fail on negative trends)\n\nasync function generateFlowCoverageReport(opts: FlowCoverageReportOptions) {\n  // Apply defaults to options.\n  var projectDir = opts.projectDir;\n\n  let tmpDirPath: ?string;\n\n  if (process.env.VERBOSE && process.env.VERBOSE === 'DUMP_JSON') {\n    tmpDirPath = await withTmpDir('flow-coverage-report');\n    console.log(`Verbose DUMP_JSON mode enabled (${tmpDirPath})`);\n  }\n\n  opts.flowCommandPath = opts.flowCommandPath || 'flow';\n  opts.flowCommandTimeout = opts.flowCommandTimeout || DEFAULT_FLOW_TIMEOUT; // defaults to 15s\n  opts.outputDir = opts.outputDir || './flow-coverage';\n  opts.outputDir = path.isAbsolute(opts.outputDir) ?\n    opts.outputDir : path.resolve(path.join(projectDir, opts.outputDir));\n  opts.globIncludePatterns = opts.globIncludePatterns || [];\n  opts.globExcludePatterns = opts.globExcludePatterns || [];\n\n  if (!Array.isArray(opts.globExcludePatterns)) {\n    opts.globExcludePatterns = [opts.globExcludePatterns];\n  }\n\n  // Apply validation checks.\n  if (!projectDir) {\n    return Promise.reject(new Error('projectDir option is mandatory'));\n  }\n\n  if (opts.globIncludePatterns.length === 0) {\n    return Promise.reject(new Error('empty globIncludePatterns option'));\n  }\n\n  if (!opts.threshold) {\n    return Promise.reject(new Error('threshold option is mandatory'));\n  }\n\n  let coverageData: FlowCoverageSummaryData = await collectFlowCoverage(\n    opts.flowCommandPath, opts.flowCommandTimeout,\n    opts.projectDir, opts.globIncludePatterns, opts.globExcludePatterns,\n    opts.threshold, opts.concurrentFiles || 1,\n    tmpDirPath\n  );\n\n  var reportResults = [];\n  const reportTypes = opts.reportTypes || ['text'];\n\n  if (reportTypes.indexOf('json') >= 0) {\n    reportResults.push(reportJSON.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf('text') >= 0) {\n    reportResults.push(reportText.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf('html') >= 0) {\n    reportResults.push(reportHTML.generate(coverageData, opts).then(() => {\n      console.log(`View generated HTML Report at file://${opts.outputDir}/index.html`);\n    }));\n  }\n\n  return Promise.all(reportResults).then(() => {\n    return [coverageData, opts];\n  });\n}\n\nmodule.exports = {\n  generateFlowCoverageReport: generateFlowCoverageReport\n};\n"]}