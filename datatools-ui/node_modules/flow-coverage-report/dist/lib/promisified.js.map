{"version":3,"sources":["../../src/lib/promisified.js"],"names":["track","exports","exec","command","options","extra","Promise","resolve","reject","err","stdout","stderr","dontReject","mkdirp","path","readFile","buff","writeFile","data","glob","pattern","files","withTmpDir","tempFileId","mkdir","dirPath"],"mappings":"AAAA;;AAIA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,eAAKA,KAAL,G,CAGkD;;;AAGlDC,QAAQC,IAAR,GAAe,UACbC,OADa,EACIC,OADJ,EAEbC,KAFa,EAGQ;AACrB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,6BAAKL,OAAL,EAAcC,OAAd,EAAuB,UAACK,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAyB;AAC9C,UAAIF,GAAJ,EAAS;AACP,YAAIJ,SAASA,MAAMO,UAAnB,EAA+B;AAC7BL,kBAAQ,EAACE,QAAD,EAAMC,cAAN,EAAcC,cAAd,EAAR;AACD,SAFD,MAEO;AACLH,iBAAOC,GAAP;AACD;AACF,OAND,MAMO;AACLF,gBAAQ,EAACG,cAAD,EAASC,cAAT,EAAR;AACD;AACF,KAVD;AAWD,GAZM,CAAP;AAaD,CAjBD;;AAmBAV,QAAQY,MAAR,GAAiB,UAAUC,IAAV,EAAuC;AACtD,SAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,0BAAOM,IAAP,EAAa,eAAO;AAClB,UAAIL,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAYAN,QAAQc,QAAR,GAAmB,UAAUD,IAAV,EAAyC;AAC1D,SAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,iBAAGO,QAAH,CAAYD,IAAZ,EAAkB,UAACL,GAAD,EAAMO,IAAN,EAAe;AAC/B,UAAIP,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQS,IAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAYAf,QAAQgB,SAAR,GAAoB,UAAUH,IAAV,EAAwBI,IAAxB,EAA4D;AAC9E,SAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,iBAAGS,SAAH,CAAaH,IAAb,EAAmBI,IAAnB,EAAyB,eAAO;AAC9B,UAAIT,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAmBAN,QAAQkB,IAAR,GAAe,UAAUC,OAAV,EAA2BhB,OAA3B,EAAwE;AACrF,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,wBAAKY,OAAL,EAAchB,OAAd,EAAuB,UAACK,GAAD,EAAMY,KAAN,EAAgB;AACrC,UAAIZ,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQc,KAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAYApB,QAAQqB,UAAR,GAAqB,UAAUC,UAAV,EAA+C;AAClE,SAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,mBAAKgB,KAAL,CAAWD,UAAX,EAAuB,UAACd,GAAD,EAAMgB,OAAN,EAAkB;AACvC,UAAIhB,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQkB,OAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD","file":"promisified.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport {exec} from 'child_process';\nimport fs from 'fs';\nimport glob from 'glob';\nimport mkdirp from 'mkdirp';\nimport temp from 'temp';\n\n// Automatically cleanup temp file on process.exit\ntemp.track();\n\nexport type ExecResult = {err?: Error, stdout?: string|Buffer, stderr?: string|Buffer};\nexport type ExecOptions = child_process$execOpts; // eslint-disable-line camelcase\nexport type ExecExtras = {dontReject?: boolean};\n\nexports.exec = function (\n  command: string, options: ExecOptions,\n  extra: ?ExecExtras\n): Promise<ExecResult> {\n  return new Promise((resolve, reject) => {\n    exec(command, options, (err, stdout, stderr) => {\n      if (err) {\n        if (extra && extra.dontReject) {\n          resolve({err, stdout, stderr});\n        } else {\n          reject(err);\n        }\n      } else {\n        resolve({stdout, stderr});\n      }\n    });\n  });\n};\n\nexports.mkdirp = function (path: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    mkdirp(path, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nexports.readFile = function (path: string): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, buff) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(buff);\n      }\n    });\n  });\n};\n\nexports.writeFile = function (path: string, data: string|Buffer): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(path, data, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nexport type GlobOptions = {\n  cwd?: string,\n  root?: string,\n};\n\nexport type GlobFilelist = Array<string>;\n\nexports.glob = function (pattern: string, options: GlobOptions): Promise<GlobFilelist> {\n  return new Promise((resolve, reject) => {\n    glob(pattern, options, (err, files) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(files);\n      }\n    });\n  });\n};\n\nexports.withTmpDir = function (tempFileId: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    temp.mkdir(tempFileId, (err, dirPath) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(dirPath);\n      }\n    });\n  });\n};\n"]}