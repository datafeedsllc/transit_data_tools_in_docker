{"version":3,"sources":["../../../src/lib/cli/args.js"],"names":["examples","appName","module","exports","processArgv","argv","basename","split","usage","command","help","alias","version","name","option","type","coerce","value","slice","resolve","describe","flowCommandPath","choices","join","projectDir","excludeGlob","options","threshold","outputDir","concurrentFiles","check","_","length","Error","epilogue"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW;AAAA,+BAGbC,OAHa,oCAIbA,OAJa,8EAKbA,OALa,gEAMbA,OANa,6EAObA,OAPa;AAAA,CAAjB;;AAcAC,OAAOC,OAAP,GAAiB;AACfC,aADe,uBACHC,IADG,EACG;AAChB,QAAMJ,UAAU,eAAKK,QAAL,CAAcD,KAAK,CAAL,CAAd,EAAuBE,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAhB;;AAEA,WAAO,qBAAMF,IAAN,EAAYG,KAAZ,CAAkB,yCAAlB,EACJC,OADI,CACI,QADJ,EACc,sEADd,EAEJC,IAFI,CAEC,GAFD,EAGJC,KAHI,CAGE,GAHF,EAGO,MAHP,EAIJC,OAJI,CAII;AAAA,aAAM,kBAAIC,IAAJ,GAAW,GAAX,GAAiB,kBAAID,OAA3B;AAAA,KAJJ,EAKJD,KALI,CAKE,GALF,EAKO,SALP;AAML;AANK,KAOJG,MAPI,CAOG,mBAPH,EAOwB;AAC3BH,aAAO,GADoB;AAE3BI,YAAM,QAFqB;AAG3BC,cAAQ;AAAA,eAASC,MAAMC,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsB,IAAtB,GAA6B,eAAKC,OAAL,CAAaF,KAAb,CAA7B,GAAmDA,KAA5D;AAAA,OAHmB;AAI3BG,+DAAuD,sBAAcC,eAArE;AAJ2B,KAPxB;AAaL;AAbK,KAcJP,MAdI,CAcG,MAdH,EAcW;AACdH,aAAO,GADO;AAEdI,YAAM,QAFQ;AAGdO,eAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAHK;AAIdF,mEAA2D,sBAAcL,IAAd,CAAmBQ,IAAnB,CAAwB,IAAxB,CAA3D;AAJc,KAdX;AAoBL;AApBK,KAqBJT,MArBI,CAqBG,aArBH,EAqBkB;AACrBH,aAAO,GADc;AAErBI,YAAM,QAFe;AAGrBK,+DAAuD,sBAAcI,UAArE;AAHqB,KArBlB;AA0BL;AA1BK,KA2BJV,MA3BI,CA2BG,cA3BH,EA2BmB;AACtBH,aAAO,GADe;AAEtBI,YAAM,QAFgB;AAGtBK,gBAAU;AAHY,KA3BnB,EAgCJN,MAhCI,CAgCG,cAhCH,EAgCmB;AACtBH,aAAO,GADe;AAEtBI,YAAM,QAFgB;AAGtBK,gBAAU,0EACS,sBAAcK,WADvB;AAHY,KAhCnB,EAsCJC,OAtCI,CAsCI,WAtCJ,EAsCiB;AACpBX,YAAM,QADc;AAEpBK,yEAAiE,sBAAcO,SAA/E;AAFoB,KAtCjB;AA0CL;AA1CK,KA2CJb,MA3CI,CA2CG,YA3CH,EA2CiB;AACpBH,aAAO,GADa;AAEpBI,YAAM,QAFc;AAGpBK,oGAA4F,sBAAcQ,SAA1G;AAHoB,KA3CjB;AAgDL;AAhDK,KAiDJd,MAjDI,CAiDG,kBAjDH,EAiDuB;AAC1BH,aAAO,GADmB;AAE1BI,YAAM,QAFoB;AAG1BK,6FAAqF,sBAAcS,eAAnG;AAH0B,KAjDvB;AAsDL;AAtDK,KAuDJf,MAvDI,CAuDG,WAvDH,EAuDgB;AACnBC,YAAM,SADa;AAEnBK,gBAAU;AAFS,KAvDhB,EA2DJN,MA3DI,CA2DG,QA3DH,EA2Da;AAChBC,YAAM,QADU;AAEhBK,gBAAU;AAFM,KA3Db,EA+DJU,KA/DI,CA+DE,gBAAQ;AACb,UAAIzB,KAAK0B,CAAL,CAAOC,MAAP,GAAgB,CAApB,EAAuB;AACrB,cAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,aAAO,IAAP;AACD,KArEI,EAsEJC,QAtEI,CAsEKlC,SAASC,OAAT,CAtEL,EAuENI,IAvED;AAwED;AA5Ec,CAAjB","file":"args.js","sourcesContent":["import path from 'path';\nimport yargs from 'yargs';\n\nimport npm from '../../../package';\n\nimport {defaultConfig} from './config';\n\nconst examples = appName => `\nExamples:\n\n  ${appName} report -i \"src/**/*.js\"\n  ${appName} report -p /path/to/project -i \"src/**/*.js\" -x \"src/test/**/*.js\"\n  ${appName} report -t html -p /path/to/project -i \"src/**/*.js\"\n  ${appName} report -t html -t json -t text /path/to/project -i \"src/**/*.js\"\n  ${appName} report -i \"src/**/*.js\" -c 5\n\nFor more informations:\n\n  https://github.com/rpl/flow-coverage-report\n`;\n\nmodule.exports = {\n  processArgv(argv) {\n    const appName = path.basename(argv[1]).split('.')[0];\n\n    return yargs(argv).usage('Usage: $0 COMMAND PROJECTDIR [...globs]')\n      .command('report', 'Generate Flow Coverage Report on file selected by the GLOB parameter')\n      .help('h')\n      .alias('h', 'help')\n      .version(() => npm.name + ' ' + npm.version)\n      .alias('v', 'version')\n      // --type text\n      .option('flow-command-path', {\n        alias: 'f',\n        type: 'string',\n        coerce: value => value.slice(0, 2) === './' ? path.resolve(value) : value,\n        describe: `path to the flow executable (defaults to \"${defaultConfig.flowCommandPath}\")`\n      })\n      // --type text\n      .option('type', {\n        alias: 't',\n        type: 'choice',\n        choices: ['html', 'json', 'text'],\n        describe: `format of the generated reports (defaults to \"${defaultConfig.type.join(', ')}\")`\n      })\n      // --project-dir \"/project/dir/path\"\n      .option('project-dir', {\n        alias: 'p',\n        type: 'string',\n        describe: `select the project dir path (defaults to \"${defaultConfig.projectDir}\")`\n      })\n      // --include-glob \"src/**/*.js\"\n      .option('include-glob', {\n        alias: 'i',\n        type: 'string',\n        describe: 'include the files selected by the specified glob'\n      })\n      .option('exclude-glob', {\n        alias: 'x',\n        type: 'string',\n        describe: 'exclude the files selected by the specified glob ' +\n          `(defaults to \"${defaultConfig.excludeGlob}\")`\n      })\n      .options('threshold', {\n        type: 'number',\n        describe: `the minimum coverage percent requested (defaults to ${defaultConfig.threshold})`\n      })\n      // --output-dir \"/var/public_html/flow-coverage\"\n      .option('output-dir', {\n        alias: 'o',\n        type: 'string',\n        describe: `output html or json files to this folder relative to project-dir (defaults to \"${defaultConfig.outputDir}\")`\n      })\n      // --concurrent-files 5\n      .option('concurrent-files', {\n        alias: 'c',\n        type: 'number',\n        describe: `the maximum number of files concurrently submitted to flow (defaults to ${defaultConfig.concurrentFiles})`\n      })\n      // --no-config\n      .option('no-config', {\n        type: 'boolean',\n        describe: 'do not load any config file from the project dir'\n      })\n      .option('config', {\n        type: 'string',\n        describe: 'file path of the config file to load'\n      })\n      .check(argv => {\n        if (argv._.length > 2) {\n          throw new Error('ERROR: The include glob needs to be quoted.');\n        }\n\n        return true;\n      })\n      .epilogue(examples(appName))\n    .argv;\n  }\n};\n"]}