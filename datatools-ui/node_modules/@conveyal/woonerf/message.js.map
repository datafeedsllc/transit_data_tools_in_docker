{"version":3,"sources":["message.js"],"names":["dbg","KeysUsed","Set","setMessages","newMessages","messages","process","env","MESSAGES","JSON","parse","getMessage","key","defaultMessage","parameters","add","msg","result","replaceMessage","data","replace","RegExp","Object","keys","join","m","hasOwnProperty"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AACA;;;;;;AAEA,IAAMA,GAAG,GAAG,oBAAM,iBAAN,CAAZ;AAEA;;;;AAGO,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AAEP;;;;;;AAGO,SAASC,WAAT,CAAsBC,WAAtB,EAAmC;AACxCC,EAAAA,QAAQ,GAAGD,WAAX;AACD;;AAED,IAAIC,QAAQ,GAAG,EAAf;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAhB,EAA0B;AACxBL,EAAAA,WAAW,CAACM,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,GAAR,CAAYC,QAAvB,CAAD,CAAX;AACD;AAED;;;;;AAGe,SAASG,UAAT,CAAqBC,GAArB,EAAkCC,cAAlC,EAAoEC,UAApE,EAAiG;AAC9G,MAAID,cAAc,IAAI,IAAtB,EAA4B;AAC1BA,IAAAA,cAAc,GAAG,EAAjB;AACAC,IAAAA,UAAU,GAAG,EAAb;AACD,GAHD,MAGO,IAAI,QAAOD,cAAP,MAA0B,QAA9B,EAAwC;AAC7CC,IAAAA,UAAU,GAAGD,cAAb;AACAA,IAAAA,cAAc,GAAG,EAAjB;AACD,GAP6G,CAS9G;;;AACAZ,EAAAA,QAAQ,CAACc,GAAT,CAAaH,GAAb,EAV8G,CAY9G;;AACA,MAAMI,GAAG,GAAG,kBAAIX,QAAJ,EAAcO,GAAd,EAAmBC,cAAnB,CAAZ;AACA,MAAMI,MAAM,GAAGH,UAAU,GAAGI,cAAc,CAACF,GAAD,EAAMF,UAAN,CAAjB,GAAqCE,GAA9D;AACAhB,EAAAA,GAAG,CAACY,GAAD,EAAMK,MAAN,CAAH;AACA,SAAOA,MAAP;AACD;;AAED,SAASC,cAAT,CAAyBF,GAAzB,EAA8BG,IAA9B,EAAoC;AAClC,SAAOH,GAAG,CAACI,OAAJ,CACL,IAAIC,MAAJ,CAAW,UAAUC,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,IAAlB,CAAuB,GAAvB,CAAV,GAAwC,MAAnD,EAA2D,GAA3D,CADK,EAEL,UAACC,CAAD,EAAIb,GAAJ;AAAA,WAAYO,IAAI,CAACO,cAAL,CAAoBd,GAApB,IAA2BO,IAAI,CAACP,GAAD,CAA/B,GAAuCa,CAAnD;AAAA,GAFK,CAAP;AAID","sourcesContent":["// @flow\nimport debug from 'debug'\nimport get from 'lodash/get'\n\nconst dbg = debug('woonerf:message')\n\n/**\n * Expose a Set of all the keys used\n */\nexport const KeysUsed = new Set()\n\n/**\n * Set the messages object\n */\nexport function setMessages (newMessages) {\n  messages = newMessages\n}\n\nlet messages = {}\nif (process.env.MESSAGES) {\n  setMessages(JSON.parse(process.env.MESSAGES))\n}\n\n/**\n * Requires a key, defaultMessage and parameters are optional\n */\nexport default function getMessage (key: string, defaultMessage?: string | Object, parameters?: Object): string {\n  if (defaultMessage == null) {\n    defaultMessage = ''\n    parameters = {}\n  } else if (typeof defaultMessage === 'object') {\n    parameters = defaultMessage\n    defaultMessage = ''\n  }\n\n  // Store the used key\n  KeysUsed.add(key)\n\n  // Get the message with \"lodash/get\" to allow nested keys ('noun.action' => {noun: {action: 'value'}})\n  const msg = get(messages, key, defaultMessage)\n  const result = parameters ? replaceMessage(msg, parameters) : msg\n  dbg(key, result)\n  return result\n}\n\nfunction replaceMessage (msg, data) {\n  return msg.replace(\n    new RegExp('%\\\\((' + Object.keys(data).join('|') + ')\\\\)', 'g'),\n    (m, key) => data.hasOwnProperty(key) ? data[key] : m\n  )\n}\n"]}