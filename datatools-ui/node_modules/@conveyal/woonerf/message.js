"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setMessages = setMessages;
exports.default = getMessage;
exports.KeysUsed = void 0;

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.object.keys");

require("core-js/modules/es6.regexp.constructor");

require("core-js/modules/es6.regexp.replace");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.string.iterator");

require("core-js/modules/es6.set");

var _debug = _interopRequireDefault(require("debug"));

var _get = _interopRequireDefault(require("lodash/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var dbg = (0, _debug.default)('woonerf:message');
/**
 * Expose a Set of all the keys used
 */

var KeysUsed = new Set();
/**
 * Set the messages object
 */

exports.KeysUsed = KeysUsed;

function setMessages(newMessages) {
  messages = newMessages;
}

var messages = {};

if (process.env.MESSAGES) {
  setMessages(JSON.parse(process.env.MESSAGES));
}
/**
 * Requires a key, defaultMessage and parameters are optional
 */


function getMessage(key, defaultMessage, parameters) {
  if (defaultMessage == null) {
    defaultMessage = '';
    parameters = {};
  } else if (_typeof(defaultMessage) === 'object') {
    parameters = defaultMessage;
    defaultMessage = '';
  } // Store the used key


  KeysUsed.add(key); // Get the message with "lodash/get" to allow nested keys ('noun.action' => {noun: {action: 'value'}})

  var msg = (0, _get.default)(messages, key, defaultMessage);
  var result = parameters ? replaceMessage(msg, parameters) : msg;
  dbg(key, result);
  return result;
}

function replaceMessage(msg, data) {
  return msg.replace(new RegExp('%\\((' + Object.keys(data).join('|') + ')\\)', 'g'), function (m, key) {
    return data.hasOwnProperty(key) ? data[key] : m;
  });
}

//# sourceMappingURL=message.js