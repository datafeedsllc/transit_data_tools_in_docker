"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createStore;

require("core-js/modules/es7.object.get-own-property-descriptors");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.object.keys");

var _merge = _interopRequireDefault(require("lodash/merge"));

var _redux = require("redux");

var _reactRouterRedux = require("react-router-redux");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var configureStore = null;

if (process.env.NODE_ENV === 'production') {
  configureStore = require('./store.production');
} else if (process.env.NODE_ENV === 'test') {
  configureStore = require('./store.mock');
} else {
  configureStore = require('./store.development');
}

function createStore(reducers) {
  var configuredState = safeParse(process.env.STORE);
  var locallyStoredState = safeParse(window.localStorage ? window.localStorage.getItem('state') : {});
  var store = configureStore((0, _redux.combineReducers)(_objectSpread({
    routing: _reactRouterRedux.routerReducer
  }, reducers)), (0, _merge.default)(configuredState, locallyStoredState));
  return store;
}

function safeParse(str) {
  try {
    return JSON.parse(str) || {};
  } catch (e) {
    return {};
  }
}

module.exports = exports.default;

//# sourceMappingURL=index.js